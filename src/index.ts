import { Telegraf } from 'telegraf';
import dotenv from 'dotenv';
import { createClient } from '@supabase/supabase-js';

dotenv.config();

const bot = new Telegraf(process.env.BOT_TOKEN as string);

const supabase = createClient(
  process.env.SUPABASE_URL as string,
  process.env.SUPABASE_SERVICE_ROLE_KEY as string
);

bot.start(async (ctx) => {
  const payload = ctx.startPayload;

  if (!payload) {
    return ctx.reply('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.');
  }

  // 1. –ò—â–µ–º —Ç–æ–∫–µ–Ω –≤ –±–∞–∑–µ
  const { data: existingToken, error: checkError } = await supabase
    .from('telegram_tokens')
    .select('*')
    .eq('token', payload)
    .maybeSingle();

  if (checkError) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞:', checkError.message);
    return ctx.reply('‚ö† –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞.');
  }

  // 2. –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞
  if (!existingToken) {
    return ctx.reply('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–µ–∂—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Ö–æ–¥–∞.');
  }

  // 3. –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω ‚Äî –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è
  if (existingToken.user_id) {
    return ctx.reply('‚ö† –≠—Ç–æ—Ç —Ç–æ–∫–µ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π.');
  }

  // 4. –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º user_id (—ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ!)
  const { error: updateError } = await supabase
    .from('telegram_tokens')
    .update({
      user_id: ctx.from.id,
    })
    .eq('token', payload);

  if (updateError) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:', updateError.message);
    return ctx.reply('‚ö† –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }

  const returnUrl = 'https://magicpic-seven.vercel.app';

  return ctx.reply(
    '‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\nüîÅ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç.',
    {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: 'üîÅ –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç',
              url: returnUrl,
            },
          ],
        ],
      },
    }
  );
});

bot.launch();
